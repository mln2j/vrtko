////  TaskRepository.swift//  Vrtko////  Created by Mihael Lendvaj on 31.05.2025..//import Foundationimport FirebaseFirestoreclass TaskRepository: ObservableObject {    @Published var tasks: [TaskItem] = []    private var listener: ListenerRegistration?        func fetchTasks(for userId: String, date: Date? = nil) {        listener?.remove()        let query = Firestore.firestore().collection("tasks")            .whereField("userId", isEqualTo: userId)                var finalQuery: Query = query        if let date = date {            let calendar = Calendar.current            let startOfDay = calendar.startOfDay(for: date)            let endOfDay = calendar.date(byAdding: .day, value: 1, to: startOfDay)!            finalQuery = query                .whereField("dueDate", isGreaterThanOrEqualTo: Timestamp(date: startOfDay))                .whereField("dueDate", isLessThan: Timestamp(date: endOfDay))        }                listener = finalQuery.addSnapshotListener { snapshot, error in            guard let documents = snapshot?.documents else {                print("Nema taskova dohvaÄ‡enih iz Firestore-a")                return            }            self.tasks = documents.compactMap { try? $0.data(as: TaskItem.self) }        }    }        func addTask(_ task: TaskItem) async throws {        try Firestore.firestore().collection("tasks").addDocument(from: task)    }        func updateTask(_ task: TaskItem) async throws {        guard let id = task.id else { return }        try Firestore.firestore().collection("tasks").document(id).setData(from: task)    }        func deleteTask(_ task: TaskItem) async throws {        guard let id = task.id else { return }        try await Firestore.firestore().collection("tasks").document(id).delete()    }        deinit {        listener?.remove()    }}