////  PlantRepository.swift//  Vrtko////  Created by Mihael Lendvaj on 31.05.2025..//import Foundationimport FirebaseFirestoreclass PlantRepository: ObservableObject {    @Published var plants: [GardenPlant] = []    private var listener: ListenerRegistration?        func updatePlant(_ plant: GardenPlant) async throws {        guard let id = plant.id else { return }        try await Firestore.firestore().collection("plants").document(id).setData(from: plant)    }        func updatePlantStatus(plantId: String, newStatus: PlantStatus) async throws {        let db = Firestore.firestore()        try await db.collection("plants").document(plantId).updateData([            "status": newStatus.rawValue        ])    }    func deleteTasksForPlant(plantId: String) async throws {        let db = Firestore.firestore()        let query = db.collection("tasks").whereField("relatedPlant", isEqualTo: plantId)        let snapshot = try await query.getDocuments()        for document in snapshot.documents {            try await document.reference.delete()        }    }        func fetchPlants(for gardenId: String) {        listener?.remove()        listener = Firestore.firestore().collection("plants")            .whereField("gardenId", isEqualTo: gardenId)            .addSnapshotListener { snapshot, error in                guard let documents = snapshot?.documents else { return }                self.plants = documents.compactMap { try? $0.data(as: GardenPlant.self) }                print("Fetched plants: \(self.plants.count)")                for plant in self.plants {                    print("Plant: \(plant.plantType.name), id: \(plant.id ?? "nil")")                }            }    }        func deletePlant(withId id: String) async throws {        try await Firestore.firestore().collection("plants").document(id).delete()    }        func fetchPlantsForUser(userId: String) {        // 1. Dohvati sve vrtove korisnika        Firestore.firestore().collection("gardens")            .whereField("ownerId", isEqualTo: userId)            .getDocuments { snapshot, error in                guard let gardenDocs = snapshot?.documents else {                    self.plants = []                    return                }                let gardenIds = gardenDocs.map { $0.documentID }                self.fetchPlants(forGardenIds: gardenIds)            }    }    private func fetchPlants(forGardenIds gardenIds: [String]) {        listener?.remove()        guard !gardenIds.isEmpty else {            self.plants = []            return        }        Firestore.firestore().collection("plants")            .whereField("gardenId", in: gardenIds)            .addSnapshotListener { snapshot, error in                guard let documents = snapshot?.documents else { return }                self.plants = documents.compactMap { try? $0.data(as: GardenPlant.self) }            }    }    func addPlant(_ plant: GardenPlant, userId: String) async throws {        var newPlant = plant        newPlant.id = nil        let ref = try await Firestore.firestore().collection("plants").addDocument(from: newPlant)        // Nakon Å¡to je biljka spremljena, generiraj taskove        var plantWithId = newPlant        plantWithId.id = ref.documentID        try await generateDefaultTasks(for: plantWithId, userId: userId)    }    deinit {        listener?.remove()    }}extension PlantRepository {    func generateDefaultTasks(for plant: GardenPlant, userId: String) async throws {        guard let plantId = plant.id else { return }        let plantedDate = plant.plantedDate        let defaultTasks: [TaskItem] = [            TaskItem(                id: nil,                userId: userId,                title: "Water seedlings",                description: "Water your new plant.",                taskType: .watering,                priority: .medium,                dueDate: Calendar.current.date(byAdding: .day, value: 2, to: plantedDate)!,                estimatedDuration: 10,                isCompleted: false,                completedDate: nil,                relatedPlant: plantId,                relatedGarden: plant.gardenId,                createdAt: Date(),                reminder: nil            ),            TaskItem(                id: nil,                userId: userId,                title: "Weed around plant",                description: "Remove weeds around your plant.",                taskType: .weeding,                priority: .low,                dueDate: Calendar.current.date(byAdding: .day, value: 14, to: plantedDate)!,                estimatedDuration: 15,                isCompleted: false,                completedDate: nil,                relatedPlant: plantId,                relatedGarden: plant.gardenId,                createdAt: Date(),                reminder: nil            ),            TaskItem(                id: nil,                userId: userId,                title: "Harvest",                description: "Harvest your plant.",                taskType: .harvesting,                priority: .high,                dueDate: Calendar.current.date(byAdding: .day, value: plant.plantType.daysToMaturity, to: plantedDate)!,                estimatedDuration: 30,                isCompleted: false,                completedDate: nil,                relatedPlant: plantId,                relatedGarden: plant.gardenId,                createdAt: Date(),                reminder: nil            )        ]        let db = Firestore.firestore()        for task in defaultTasks {            _ = try await db.collection("tasks").addDocument(data: try Firestore.Encoder().encode(task))        }    }}