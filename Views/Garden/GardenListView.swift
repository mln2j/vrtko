import SwiftUIstruct GardenListView: View {    @StateObject private var gardenRepo = GardenRepository()    @StateObject private var locationManager = LocationManager()    @EnvironmentObject var authService: AuthService    @State private var showingAddGarden = false    // Za potvrdu brisanja    @State private var gardenToDelete: Garden? = nil    @State private var showDeleteAlert = false    var body: some View {        NavigationView {            List {                ForEach(filteredGardens) { garden in                    NavigationLink(destination: GardenDetailView(garden: garden, gardenRepo: gardenRepo)) {                        HStack {                            VStack(alignment: .leading, spacing: 4) {                                Text(garden.name)                                    .font(.headline)                                if !garden.description.isEmpty {                                    Text(garden.description)                                        .font(.subheadline)                                        .foregroundColor(.secondary)                                }                            }                            Spacer()                            Image(systemName: garden.isPublic ? "globe" : "lock.fill")                                .foregroundColor(garden.isPublic ? .green : .gray)                                .imageScale(.large)                                .padding(.leading, 8)                        }                        .padding(.vertical, 8)                    }                }                .onDelete(perform: deleteGardens)            }            .listStyle(.insetGrouped)            .navigationTitle("Moji vrtovi")            .navigationBarTitleDisplayMode(.large)            .toolbar {                ToolbarItem(placement: .navigationBarTrailing) {                    Button(action: { showingAddGarden = true }) {                        Image(systemName: "plus")                    }                    .accessibilityLabel("Dodaj vrt")                }            }            .sheet(isPresented: $showingAddGarden) {                AddGardenView(gardenRepo: gardenRepo, locationManager: locationManager)                    .environmentObject(authService)            }            .onAppear {                if let userId = authService.user?.id {                    gardenRepo.fetchGardens(for: userId)                }            }            .alert("Želite li obrisati ovaj vrt i sve njegove biljke?", isPresented: $showDeleteAlert, presenting: gardenToDelete) { garden in                Button("Obriši", role: .destructive) {                    Task {                        do {                            try await gardenRepo.deleteGarden(garden)                            if let realIndex = gardenRepo.gardens.firstIndex(where: { $0.id == garden.id }) {                                gardenRepo.gardens.remove(at: realIndex)                            }                        } catch {                            // Ovdje možeš prikazati grešku korisniku ako želiš                        }                    }                }                Button("Odustani", role: .cancel) {}            } message: { garden in                Text("Ova radnja će obrisati vrt i sve biljke unutar njega. Ova radnja je nepovratna.")            }        }    }        // Filtrirana lista vrtova s ne-nil documentId (koristi se za prikaz i brisanje)    private var filteredGardens: [Garden] {        gardenRepo.gardens.filter { $0.documentId != nil }    }    // Prikaži alert za potvrdu brisanja    private func deleteGardens(at offsets: IndexSet) {        if let index = offsets.first {            gardenToDelete = filteredGardens[index]            showDeleteAlert = true        }    }}struct GardenListView_Previews: PreviewProvider {    static var previews: some View {        GardenListView()    }}