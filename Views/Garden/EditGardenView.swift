//
//  EditGardenView.swift
//  Vrtko
//
//  Created by Mihael Lendvaj on 01.06.2025..
//


import SwiftUIimport MapKitimport CoreLocationstruct EditGardenView: View {    @Environment(\.dismiss) var dismiss    @ObservedObject var gardenRepo: GardenRepository    var garden: Garden    @State private var name: String    @State private var description: String    @State private var isPublic: Bool    @State private var location: ProductLocation    @State private var photos: [String]    @State private var selectedCoordinate: CLLocationCoordinate2D?    @State private var errorMessage = ""    @State private var isLoading = false    @StateObject private var locationManager = LocationManager()    init(garden: Garden, gardenRepo: GardenRepository) {        self.garden = garden        self._gardenRepo = ObservedObject(wrappedValue: gardenRepo)        self._name = State(initialValue: garden.name)        self._description = State(initialValue: garden.description)        self._isPublic = State(initialValue: garden.isPublic)        self._location = State(initialValue: garden.location)        self._photos = State(initialValue: garden.photos)        if let lat = garden.location.latitude, let lon = garden.location.longitude {            self._selectedCoordinate = State(initialValue: CLLocationCoordinate2D(latitude: lat, longitude: lon))        } else {            self._selectedCoordinate = State(initialValue: nil)        }    }    var body: some View {        NavigationView {            Form {                Section(header: Text("Osnovno")) {                    TextField("Ime vrta", text: $name)                    TextField("Opis", text: $description)                    Toggle("Javni vrt", isOn: $isPublic)                }                Section(header: Text("Lokacija")) {                    CustomMapPickerView(                        selectedCoordinate: $selectedCoordinate,                        initialCoordinate: selectedCoordinate ?? CLLocationCoordinate2D(latitude: 45.815, longitude: 15.9819)                    )                    .frame(height: 220)                    .cornerRadius(12)                    .padding(.vertical, 4)                    if let coord = selectedCoordinate {                        Text("Lat: \(coord.latitude), Lon: \(coord.longitude)")                            .font(.caption)                            .foregroundColor(.gray)                    }                    TextField("Adresa (opcionalno)", text: $location.address)                    TextField("Grad (opcionalno)", text: $location.city)                    TextField("Poštanski broj (opcionalno)", text: $location.postalCode)                }                if !errorMessage.isEmpty {                    Text(errorMessage).foregroundColor(.red)                }            }            .navigationTitle("Uredi vrt")            .toolbar {                ToolbarItem(placement: .confirmationAction) {                    Button("Spremi") {                        Task { await saveGarden() }                    }                    .disabled(name.isEmpty || selectedCoordinate == nil)                }                ToolbarItem(placement: .cancellationAction) {                    Button("Odustani") { dismiss() }                }            }            .onChange(of: selectedCoordinate) { newCoord in                if let coord = newCoord {                    location.latitude = coord.latitude                    location.longitude = coord.longitude                    reverseGeocode(coordinate: coord) { address, city, postalCode in                        if let address = address { location.address = address }                        if let city = city { location.city = city }                        if let postalCode = postalCode { location.postalCode = postalCode }                    }                }            }        }    }    private func saveGarden() async {        var updatedGarden = garden        updatedGarden.name = name        updatedGarden.description = description        updatedGarden.isPublic = isPublic        updatedGarden.location = location        updatedGarden.photos = photos        do {            try await gardenRepo.updateGarden(updatedGarden)            dismiss()        } catch {            errorMessage = "Greška pri spremanju: \(error.localizedDescription)"        }    }    private func reverseGeocode(coordinate: CLLocationCoordinate2D, completion: @escaping (String?, String?, String?) -> Void) {        let location = CLLocation(latitude: coordinate.latitude, longitude: coordinate.longitude)        CLGeocoder().reverseGeocodeLocation(location) { placemarks, error in            if let placemark = placemarks?.first {                let address = [placemark.thoroughfare, placemark.subThoroughfare].compactMap { $0 }.joined(separator: " ")                let city = placemark.locality                let postalCode = placemark.postalCode                completion(address, city, postalCode)            } else {                completion(nil, nil, nil)            }        }    }}