import SwiftUIimport MapKitstruct InlineMapPickerView: View {    @ObservedObject var locationManager: LocationManager    @Binding var selectedCoordinate: CLLocationCoordinate2D?    @State private var region: MKCoordinateRegion = MKCoordinateRegion(        center: CLLocationCoordinate2D(latitude: 45.815, longitude: 15.9819),        span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01)    )    @State private var debounceWorkItem: DispatchWorkItem?    var body: some View {        VStack {            Map(                coordinateRegion: $region,                interactionModes: .all,                showsUserLocation: true,                annotationItems: annotationItems            ) { item in                MapMarker(coordinate: item.coordinate, tint: .primaryGreen)            }            .frame(height: 220)            .cornerRadius(12)            .onAppear {                if let userLoc = locationManager.userLocation {                    region.center = userLoc                    selectedCoordinate = userLoc                }            }            .onChange(of: locationManager.userLocation) { userLoc in                if let userLoc = userLoc {                    region.center = userLoc                    selectedCoordinate = userLoc                }            }            .onChange(of: region.center) { newCenter in                debounceWorkItem?.cancel()                let workItem = DispatchWorkItem {                    selectedCoordinate = newCenter                }                debounceWorkItem = workItem                DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: workItem)            }            Text("Pomakni kartu i pozicioniraj marker na Å¾eljenu lokaciju vrta.")                .font(.caption)                .padding(.top, 4)        }    }    private var annotationItems: [MapAnnotationItem] {        if let coord = selectedCoordinate {            return [MapAnnotationItem(coordinate: coord)]        }        return []    }}struct MapAnnotationItem: Identifiable {    let id = UUID()    let coordinate: CLLocationCoordinate2D}