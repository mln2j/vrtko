import SwiftUIimport MapKitstruct InlineMapPickerView: View {    @ObservedObject var locationManager: LocationManager    @Binding var selectedCoordinate: CLLocationCoordinate2D?    @State private var cameraPosition: MapCameraPosition    @State private var debounceWorkItem: DispatchWorkItem?    init(locationManager: LocationManager, selectedCoordinate: Binding<CLLocationCoordinate2D?>) {        self.locationManager = locationManager        // Ako postoji početna koordinata, koristi je za kameru, inače Zagreb        let initialCoord = selectedCoordinate.wrappedValue ?? CLLocationCoordinate2D(latitude: 45.815, longitude: 15.9819)        self._cameraPosition = State(initialValue: .region(            MKCoordinateRegion(center: initialCoord, span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01))        ))        self._selectedCoordinate = selectedCoordinate    }    var body: some View {        VStack {            Map(position: $cameraPosition) {                if let coord = selectedCoordinate {                    Marker("", coordinate: coord)                        .tint(.green)                }            }            .mapControls {                MapUserLocationButton()            }            .frame(height: 220)            .cornerRadius(12)            .onAppear {                // Ako je već postavljen pin, koristi njega                if let coord = selectedCoordinate {                    cameraPosition = .region(                        MKCoordinateRegion(center: coord, span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01))                    )                } else if let userLoc = locationManager.userLocation {                    // Prvi put koristi userLocation                    cameraPosition = .region(                        MKCoordinateRegion(center: userLoc, span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01))                    )                    selectedCoordinate = userLoc                }            }            .onChange(of: locationManager.userLocation) { userLoc in                // Ako još nema pina, koristi userLocation                if selectedCoordinate == nil, let userLoc = userLoc {                    cameraPosition = .region(                        MKCoordinateRegion(center: userLoc, span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01))                    )                    selectedCoordinate = userLoc                }            }            .onMapCameraChange(frequency: .onEnd) { context in                debounceWorkItem?.cancel()                let workItem = DispatchWorkItem {                    selectedCoordinate = context.region.center                }                debounceWorkItem = workItem                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5, execute: workItem)            }            Text("Pomakni kartu i pozicioniraj marker na željenu lokaciju vrta.")                .font(.caption)                .padding(.top, 4)        }    }}