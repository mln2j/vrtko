import SwiftUIimport MapKitimport CoreLocationstruct AddGardenView: View {    @Environment(\.dismiss) var dismiss    @ObservedObject var gardenRepo: GardenRepository    @ObservedObject var locationManager: LocationManager    @EnvironmentObject var authService: AuthService    @State private var name = ""    @State private var description = ""    @State private var isPublic = false    @State private var selectedCoordinate: CLLocationCoordinate2D? = nil    @State private var location = ProductLocation(address: "", city: "", postalCode: "", latitude: nil, longitude: nil, distanceFromUser: nil)    @State private var photos: [String] = []    @State private var errorMessage = ""    @State private var isLoading = false    @State private var didCenterOnUser = false    var body: some View {        NavigationView {            Form {                Section(header: Text("Osnovno")) {                    TextField("Ime vrta", text: $name)                    TextField("Opis", text: $description)                    Toggle("Javni vrt", isOn: $isPublic)                }                Section(header: Text("Lokacija")) {                    CustomMapPickerView(                        selectedCoordinate: $selectedCoordinate,                        initialCoordinate: selectedCoordinate                            ?? locationManager.userLocation                            ?? CLLocationCoordinate2D(latitude: 45.815, longitude: 15.9819)                    )                    .frame(height: 220)                    .cornerRadius(12)                    .padding(.vertical, 4)                    if let coord = selectedCoordinate {                        Text("Lat: \(coord.latitude), Lon: \(coord.longitude)")                            .font(.caption)                            .foregroundColor(.gray)                    }                    TextField("Adresa (opcionalno)", text: $location.address)                    TextField("Grad (opcionalno)", text: $location.city)                    TextField("Poštanski broj (opcionalno)", text: $location.postalCode)                }                if !errorMessage.isEmpty {                    Text(errorMessage).foregroundColor(.red)                }            }            .navigationTitle("Novi vrt")            .toolbar {                ToolbarItem(placement: .confirmationAction) {                    Button("Spremi") {                        Task { await saveGarden() }                    }                    .disabled(name.isEmpty || selectedCoordinate == nil)                }                ToolbarItem(placement: .cancellationAction) {                    Button("Odustani") { dismiss() }                }            }            // Sinkronizacija lokacije s pinom            .onChange(of: selectedCoordinate) { newCoord in                if let coord = newCoord {                    location.latitude = coord.latitude                    location.longitude = coord.longitude                    reverseGeocode(coordinate: coord) { address, city, postalCode in                        if let address = address { location.address = address }                        if let city = city { location.city = city }                        if let postalCode = postalCode { location.postalCode = postalCode }                    }                }            }            // Prvi put centriraj na korisnika            .onChange(of: locationManager.userLocation) { userLoc in                guard !didCenterOnUser else { return }                if let userLoc = userLoc {                    selectedCoordinate = userLoc                    didCenterOnUser = true                }            }        }    }    private func saveGarden() async {        guard let ownerId = authService.user?.id else {            errorMessage = "Nema korisnika."            return        }        isLoading = true        let newGarden = Garden(            name: name,            description: description,            ownerId: ownerId,            location: location,            isPublic: isPublic,            createdAt: Date(),            photos: photos        )        do {            try await gardenRepo.addGarden(newGarden)            dismiss()        } catch {            errorMessage = "Greška pri spremanju: \(error.localizedDescription)"        }        isLoading = false    }    private func reverseGeocode(coordinate: CLLocationCoordinate2D, completion: @escaping (String?, String?, String?) -> Void) {        let location = CLLocation(latitude: coordinate.latitude, longitude: coordinate.longitude)        CLGeocoder().reverseGeocodeLocation(location) { placemarks, error in            if let placemark = placemarks?.first {                let address = [placemark.thoroughfare, placemark.subThoroughfare].compactMap { $0 }.joined(separator: " ")                let city = placemark.locality                let postalCode = placemark.postalCode                completion(address, city, postalCode)            } else {                completion(nil, nil, nil)            }        }    }}