import SwiftUIstruct PlantDetailView: View {    @State var plant: GardenPlant    @ObservedObject var plantRepo: PlantRepository    let userId: String    @Environment(\.presentationMode) var presentationMode    @State private var showSaveAlert = false    @State private var originalPlantedDate: Date    init(plant: GardenPlant, plantRepo: PlantRepository, userId: String) {        _plant = State(initialValue: plant)        _originalPlantedDate = State(initialValue: plant.plantedDate)        self.plantRepo = plantRepo        self.userId = userId    }    var body: some View {        NavigationView {            Form {                Section(header: Text("Vrsta")) {                    HStack {                        Text(plant.plantType.icon)                        Text(plant.plantType.name)                    }                    if let sci = plant.plantType.scientificName {                        Text("Latinski: \(sci)").font(.caption)                    }                }                Section(header: Text("Detalji")) {                    if !plant.variety.isEmpty {                        Text("Sorta: \(plant.variety)")                    }                    Picker("Status", selection: $plant.status) {                        ForEach(PlantStatus.allCases, id: \.self) { status in                            Text(status.displayName).tag(status)                        }                    }                    DatePicker("Zasađeno", selection: $plant.plantedDate, displayedComponents: .date)                }                if !plant.notes.isEmpty {                    Section(header: Text("Napomena")) {                        Text(plant.notes)                    }                }            }            .navigationTitle("Detalji biljke")            .toolbar {                ToolbarItem(placement: .cancellationAction) {                    Button("Zatvori") { presentationMode.wrappedValue.dismiss() }                }                ToolbarItem(placement: .confirmationAction) {                    Button("Spremi") {                        saveChanges()                    }                }            }            .alert("Promjene spremljene", isPresented: $showSaveAlert) {                Button("OK", role: .cancel) { presentationMode.wrappedValue.dismiss() }            }        }        .onAppear {            print("PlantDetailView prikazuje biljku s id: \(plant.id ?? "nil"), status: \(plant.status.rawValue), zasađeno: \(plant.plantedDate)")        }    }    private func saveChanges() {        Task {            do {                try await plantRepo.updatePlant(plant)                if plant.plantedDate != originalPlantedDate {                    try await plantRepo.deleteTasksForPlant(plantId: plant.id!)                    try await plantRepo.generateDefaultTasks(for: plant, userId: userId)                }                showSaveAlert = true            } catch {                // Ovdje možeš prikazati error alert            }        }    }}